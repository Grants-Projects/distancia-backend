openapi: 3.0.0
info:
  title: 'Distancia Backend Service'
  description: 'This service provides endpoints for all related interactions'
  version: 1.0.0
  contact:
    name: 'Distancia Team'
    email: 'dev@distancia.com'

x-organization: distancia
x-service-id: backend

servers:
  - description: Staging
    url: https://distancia-dlt.herokuapp.com/

tags:
  - name: onboarding
    description: 'User onboarding related endpoints'
  - name: ads
    description: 'ads related endpoints'
  - name: milestone
    description: 'milestone related endpoints'

security:
  - bearerToken: []

paths:
  /onboarding/address:
    post:
      summary: "Endpoint to save user's address to database"
      operationId: saveUserAddress
      x-visibility: public
      tags:
        - 'onboarding'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveAddressResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

  /user/register:
    post:
      summary: 'Endpoint to register user'
      operationId: userRegister
      x-visibility: public
      tags:
        - 'user'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUser'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

  /user/login:
    post:
      summary: 'Endpoint to login user'
      operationId: loginUser
      x-visibility: public
      tags:
        - 'user'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

  /interests:
    get:
      summary: 'fetch all interests'
      operationId: interests
      description: 'fetch all list of interests'
      x-visibility: public
      tags:
        - 'interests'
      responses:
        '200':
          $ref: '#/components/responses/InterestListResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

  /ads:
    get:
      summary: 'fetch all ads'
      operationId: ads
      x-visibility: public
      description: 'fetch all ads'
      tags:
        - 'ads'
      responses:
        '200':
          $ref: '#/components/responses/AdsListResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

  /milestone/covered:
    post:
      summary: "Endpoint to update user's milestone"
      operationId: milestoneCovered
      x-visibility: public
      tags:
        - 'milestone'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestoneCovered'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # REQUEST OBJECT DEFINITIONS
    UserAddress:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          description: The address of the user

    registerUser:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          description: The email of the user
        id:
          type: string
          description: The id of the user
        username:
          type: string
          description: The username

    loginUser:
      type: object
      required:
        - email
        - username
      properties:
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user

    MilestoneCovered:
      type: object
      required:
        - distance
      properties:
        distance:
          type: string
          description: The distance moved by the user
        type:
          type: string
          description: Type of activity

    # RESPONSE OBJECT DEFINITIONS
    InterestList:
      type: 'array'
      description: 'List of interests'
      items:
        $ref: '#/components/schemas/InterestDto'

    AdsList:
      type: 'object'
      description: 'List of Ads'
      properties:
        status:
          type: 'string'
        message:
          type: 'string'
        data:
          type: 'array'
          items:
            $ref: '#/components/schemas/AdsDto'

    SaveAddressResponse:
      type: 'object'
      required:
        - 'id'
        - 'address'
      properties:
        id:
          type: 'string'
          format: 'uuid'
          description: 'The id of user'
        address:
          type: 'string'
          description: 'The address of user'

    RegisterUserResponse:
      type: 'object'
      required:
        - 'id'
        - 'token'
      properties:
        id:
          type: 'string'
          format: 'uuid'
          description: 'The id of the user'
        token:
          type: 'string'
          description: 'The user token'

    LoginUserResponse:
      type: 'object'
      required:
        - 'email'
        - 'username'
        - 'id'
        - 'token'
      properties:
        id:
          type: 'string'
          format: 'uuid'
          description: 'The id of the user'
        email:
          type: 'string'
          description: 'The user email'
        username:
          type: 'string'
          description: 'The username'
        token:
          type: string
          description: 'The token'

    InterestDto:
      type: 'object'
      required:
        - 'id'
        - 'name'
        - 'url'
        - 'status'
        - 'createdAt'
        - 'updatedAt'
      properties:
        id:
          type: 'string'
          description: 'The id of interest'
        name:
          type: 'string'
          description: 'The name of the interest'
        url:
          type: 'string'
          description: 'The url of the interest'
        status:
          type: 'string'
          description: 'Status'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    AdsDto:
      type: 'object'
      required:
        - 'id'
      properties:
        id:
          type: 'string'
          format: 'uuid'
          description: 'The id of ads'
        owner_id:
          type: 'string'
          format: 'uuid'
          description: 'The owner id of the ads'
        media_link:
          type: 'string'
          description: 'The url for the ads video or audio'
        media_type:
          type: 'string'
          description: 'The media type of the ad (video | audio)'
        interests:
          type: 'array'
          description: 'The interests related to the ads'
          items:
            $ref: '#/components/schemas/InterestDto'

    SuccessMessage:
      type: object
      properties:
        success:
          type: boolean
          description: Returns a true to state that action was successful
          example: true
        message:
          type: string
          description: Message for successful operation
          example: Verification otp has been sent to your email

    ErrorMessageDto:
      $ref: 'https://api-spec-common.s3.amazonaws.com/common.yaml#/components/schemas/ErrorMessageDto'

    StatusDto:
      $ref: 'https://api-spec-common.s3.amazonaws.com/common.yaml#/components/schemas/StatusDto'
    Timestamp:
      $ref: 'https://resources.nestechops.com/openapi/common.yaml#/components/schemas/Timestamp'

    # ENUM DEFINITIONS
  responses:
    StatusResponse:
      description: Request status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusDto'
          example:
            success: true
            message: 'Action completed successfully'
            data:
              label: name of service
              expiry: date

    InterestListResponse:
      description: List of interests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InterestList'

    AdsListResponse:
      description: List of ads
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdsList'

    InvalidRequest:
      description: Request could not be validated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'BAD_REQUEST'
            message: 'Request could not be validated.'

    Unauthorized:
      description: Client is not authorized to make request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'UNAUTHORIZED'
            message: 'Either client security header is missing or it is not valid.'

    NotFound:
      description: Entity was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'NOT_FOUND'
            message: 'Information could not be found'

    ConflictError:
      description: Entity already exist while user tries to create it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'ACCESS_DENIED'
            message: 'Entity already exist!'

    AccessDenied:
      description: Expected permission is not available.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'ACCESS_DENIED'
            message: 'Expected permission or scope is not present.'

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'INTERNAL_ERROR'
            message: 'An internal server error occurred.'

  securitySchemes:
    bearerToken:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
      description: 'Authentication for user-facing endpoints. Uses bearer token in API prefix.'
    authToken:
      type: 'apiKey'
      name: 'x-auth-token'
      in: 'header'
      description: 'Auth Token header for inter-service communication'
